=pod

=head1 Turbo Vision

Turbo Vision is a character-mode text user interface framework.

Turbo Vision C++ is a framework developed by Borland. It is a text-based user 
interface framework created in the early 1990s by Borland.

Turbo Vision was integrated into Borland Pascal, Turbo Pascal, and Borland C++ 
and was used to create integrated development environments (IDEs) for these 
programming languages.

The framework offers various user interface elements such as edit fields, 
list boxes, checkboxes, radio buttons, and menus, all of which have mouse 
support.

=head2 History

Turbo Vision was originally written in Pascal and C++ and was intended for 
MS-DOS and IBM PC compatible systems.

It was later discontinued in favor of the Object Windows Library, the Win16 API,
and the GUI tools of Borland Delphi. In 1997, Borland released the C++ source 
code into the public domain.

Although Turbo Vision was later released into the public domain and further 
developed by an open-source community, there are no known ports to Perl.

Most further developments and ports focused on other platforms, such as Unix 
systems.

=head2 Perl TVision

Starting in 2025, I made the previously private project public after 
successfully porting the Turbo Vision C++ framework to Perl for the target 
platform Windows 10 and 11 (after two failed attempts, see commits history for 
details). 

This port is based on the original codebase of Borland C++ 4.02
(Turbo Vision 2.0 sources including bug fixes by Eric Woodruff: 
L<tv2fixed.zip|http://www.sigala.it/sergio/tvision/source/tv2fixed.zip>).

Perl TVision wanted to enable developers to use the powerful text-based user 
interfaces of Turbo Vision in Perl. Unfortunately, this failed. See why ...

=head3 I STOP HERE

Languages with automatic garbage collection (like Perl) have complementary 
problems compared to languages without garbage collection (like C/C++). For 
every issue, there is a bug characteristic of non-GC languages and a bug 
characteristic of GC languages, along with programmer responsibilities in both 
types.

Perl programmers might think they are relieved from freeing objects, but objects
hold other resources besides memory that often need to be released 
appropriately. Where a C++ programmer might have a dangling reference (often 
not a bug due to some flag or state marking it as not to be used), a Perl 
programmer has a memory leak. Thus, the C++ programmer is responsible for 
ensuring C<free/delete> is called appropriately, while the Perl programmer must 
ensure unwanted references are nulled or otherwise disposed of properly.

Perl 5 supports weak references so that programmers can deliberately avoid 
creating reference cycles. If data structures contain reference cycles, these 
are only reclaimed by the Perl runtime when the parent thread is switched off. 
This is seen as a welcome compromise, as opposed to implementing overhead cycle 
detection, which would slow down execution time.

It is claimed that a few calls to C<weaken> or using 
L<Proxy Objects|https://www.perl.com/pub/2002/08/07/proxyobject.html/> can 
handle this. This might be true, but Turbo Vision sources use many dangling 
references in various tree structures or collections. To break all these cycles 
and ensure timely disposal of garbage memory, the Perl implementation must have 
an intelligent scheme.

This is not easy - firstly because you could just as well use a non-GC 
language, and secondly because it would break important conventions in Perl. 
Turbo Vision C++ code relies heavily on the convention of resource allocation 
and ensures reliable and timely destructor calls. In Perl, which works with 
cycles, this is not possible.
 
If you interrupt a garbage cycle, you can't know which destructor to call first 
without causing dependency problems - it might even be impossible, since there 
are more cyclic dependencies than just memory references. All other resources 
have to be cleaned up manually, like in Pascal or C++, without the advantages 
of Perl.

The result is that much cleanup that is I<automated> in Perl must now be done 
manually. I<Automated> needs quotes because the programmer is responsible for 
ensuring this - but then there are different responsibilities in GC languages.

=head3 Key Features of the Port

=over

=item B<Compatibility>

The port supports 32-bit and 64-bit Strawberry Perl versions >= 5.10 and covers 
a wide range of Windows systems (Please note that not all combinations of 
Windows versions and Perl versions could be checked by me).

=item B<User Interfaces>

All original user interface elements such as edit fields, list boxes, 
checkboxes, radio buttons, and menus are available in Perl and offer full mouse 
support (in the future, so please don't be angry that this is more of an 
announcement, as so far only the basics are working).

=item B<Extensibility>

A I<Moo/s/e> based toolkit was used to ensure that the applications remain 
efficient and portable. The toolkit enables developers to extend the 
functionality of Perl TVision easily and efficiently. The L<Moos> package (by 
default), L<Moo> and L<Moose> are currently supported. 

L<Moo> and L<Moose> are widely used libraries with a well-known API. It is 
important to note that L<Moo> and L<Moose> are not required as prerequisites! 
The default toolkit L<Moos> is compatible with this API and implemented in pure 
Perl. 

It's up to you what you want to use. Simply C<use Moo> in your application, 
instead of C<use TV::toolkit> if you want to use L<Moo>. Perl TVision will then 
use L<Moo> in its entirety (the same applies to L<Moose>, of course). 

=back

=head3 Installation and Usage

The port can be installed via CPAN (Comprehensive Perl Archive Network). Simply
run the following command:

   cpan install TurboVision

A simple example to create an application with Turbo Vision in Perl:

   use TV::App;

   my $app = TApplication->new();
   $app->run();

=head3 Documentation and Support

Detailed documentation and examples can be found in the CPAN or GitHub 
repository of this port.

Please note that this is a very recent version of the port of the 
Turbo Vision C++ framework to Perl. Although I have done my best to create a 
stable and functional version, there may still be bugs and instabilities.

However, I do my best to answer questions and bug fixes quickly and reliably. 
Your feedback is extremely valuable to continuously improve the quality and 
stability of this port. Please do not hesitate to contact me if you have any 
problems or questions. For this use the GitHub issue tracker and the Github 
discussion channel.

I hope this port will facilitate the development of text-based applications in 
Perl on Windows systems and look forward to feedback and contributions from the 
developer community.

=head1 Copyright and License

Copyright (c) 1990-1994, 1997 by Borland International

Copyright (c) 2021-2025 the AUTHORS and CONTRIBUTORS as listed in the sources.

This software is licensed under the MIT license (see the LICENSE file, which is 
part of the distribution). 

=cut
